<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/schema/mybatis-3-mapper.dtd">


<mapper namespace="com.matjongchan.app.dao.reviewMapper">

    <select id="count" resultType="int">
        SELECT count(*) FROM review
    </select>

    <select id="countR" parameterType="ReviewDto" resultType="int">
        select count(*) from review where fk_restaurant_id = #{fk_restaurant_id}
    </select>

    <delete id="deleteAll">
        truncate review
    </delete>

    <delete id="delete" parameterType="map">
        delete from review where reviewer=#{reviewer} and id=#{id}
    </delete>

    <insert id="insert" parameterType="ReviewDto">
        insert into review
            (id, reviewer, title, content, taste_score, clean_score, kind_score, total_score, create_at, fk_restaurant_id)
        values
            (#{id}, #{reviewer}, #{title}, #{content}, #{taste_score}, #{clean_score}, #{kind_score}, #{total_score}, now(), #{fk_restaurant_id})
    </insert>

    <!--    전체 게시글 불러오기 (최근 등록 순으로)-->
    <select id="selectAll" resultType="ReviewDto">
        select * from review
        order by id desc
    </select>

    <!--    해당 식당 게시글 불러오기 (최근 등록 순으로)-->
    <select id="selectR" parameterType="int" resultType="ReviewDto">
        select * from review
        where fk_restaurant_id = #{fk_restaurant_id}
        order by id desc

    </select>

    <!--    해당 유저의 게시글 불러오기 (최근 등록 순으로)-->
    <select id="selectM" parameterType="String" resultType="ReviewDto">
        SELECT * FROM review AS r
        LEFT JOIN member AS m
        ON m.user_id = r.reviewer
        WHERE r.reviewer = #{reviewer}
        order by r.id desc
    </select>

    <!-- 게시글 한개 불러오기-->
    <select id="select" parameterType="int" resultType="ReviewDto">
        SELECT * from review where id = #{id}
    </select>

    <!--   수정: 글 정보(제목, 내용) 수정시 글 번호 체크, 글쓴이와 시도하는 사용자가 같은지도 필수로 확인 해야함-->
    <update id="update" parameterType="ReviewDto">
        update review set
        title=#{title},
        content=#{content},
        taste_score=#{taste_score},
        clean_score=#{clean_score},
        kind_score=#{kind_score},
        total_score=#{total_score}
        where id=#{id} and reviewer=#{reviewer}
    </update>

    <!--  식당 상세페이지에서 리뷰 3개 가져오기.  -->
    <select id="getRestaurantReview3" parameterType="ReviewDetailSearchCondition" resultType="ReviewDetail">
        SELECT  re.id as id,
            re.reviewer as reviewer,
            re.title as title,
            re.content as content,
            re.taste_score as taste_score,
            re.clean_score as clean_score,
            re.kind_score as kind_score,
            re.total_score as total_score,
            re.create_at as create_at,
            re.fk_restaurant_id as fk_restaurant_id
        FROM review AS re
            INNER JOIN restaurant AS r
                ON re.fk_restaurant_id = r.id
        WHERE r.id = #{restaurant_id}
            ORDER BY re.id DESC
            LIMIT #{offset} , #{page_size}
    </select>

    <select id ="getTotalScore" parameterType="int" resultType="decimal">
        SELECT  AVG(re.taste_score) as total_taste_score,
                AVG(re.clean_score) as total_clean_score,
                AVG(re.kind_score) as total_kind_score
        FROM review as re
        WHERE re.fk_restaurant_id = #{id}
    </select>

    <select id="getTotalScoreCountList" parameterType="int" resultType="decimal">
        SELECT total_score
        FROM review
        WHERE fk_restaurant_id = #{id}
    </select>

</mapper>








